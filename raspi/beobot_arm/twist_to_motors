#!/usr/bin/env python
"""
   twist_to_motors - converts a twist message to motor commands.  Needed for navigation stack
   
   
    Copyright (C) 2012 Jon Stephan. 
     
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copsdfy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import rospy
import roslib
from std_msgs.msg import UInt16
from geometry_msgs.msg import Twist
from beobot_control.msg import Motor
import RPi.GPIO as GPIO
import time


R_REVERSE = 6
R_BRAKE = 12
L_REVERSE = 13
L_BRAKE = 16

GPIO.setmode(GPIO.BCM)

GPIO.setup(L_REVERSE, GPIO.OUT)
GPIO.setup(R_REVERSE, GPIO.OUT)
GPIO.setup(L_BRAKE, GPIO.OUT)
GPIO.setup(R_BRAKE, GPIO.OUT)

def rf_map(value, frommin, frommax, tomin, tomax):
        if(value == 0):
            return 0
        if(value < frommin):
		value = frommin
	if(value > frommax):
		value = frommax
	return (((value-frommin)*(tomax-tomin))/(frommax-frommin)) + tomin
#############################################################
#############################################################
class TwistToMotors():
#############################################################
#############################################################

    #############################################################
    def __init__(self):
    #############################################################
        rospy.init_node("twist_to_motors")
        nodename = rospy.get_name()
        rospy.loginfo("%s started" % nodename)
    
        self.w = rospy.get_param("~base_width", 70)
    
        self.pub_motor = rospy.Publisher('motor_vel', Motor, queue_size=10)
        rospy.Subscriber('cmd_vel', Twist, self.rftwistCallback)
    
    
        self.rate = rospy.get_param("~rate", 17)
        self.timeout_ticks = rospy.get_param("~timeout_ticks", 2)
        self.left = 0
        self.prevleft = 0
        self.right = 0
        self.prevright = 0
        self.ltransition = False
        self.lreverse = False
        self.ltimekeep = 0
        self.rtransition = False
        self.rreverse = False
        self.rtimekeep = 0
    #############################################################
    def spin(self):
    #############################################################
    
        r = rospy.Rate(self.rate)
        idle = rospy.Rate(10)
        then = rospy.Time.now()
        self.ticks_since_target = self.timeout_ticks
    
        ###### main loop  ######
        while not rospy.is_shutdown():
        
            while not rospy.is_shutdown() and self.ticks_since_target < self.timeout_ticks:
                self.spinOnce()
                r.sleep()
            idle.sleep()
                
    #############################################################
    def spinOnce(self):
    #############################################################
    
        # dx = (l + r) / 2
        # dr = (r - l) / w
           
        self.left = (180 * self.dx + self.dr * self.w / 2)
        self.right = (160 * self.dx - self.dr * self.w / 2)
        if self.ltimekeep > 1:
            self.ltransition = True
            self.ltimekeep -= 1
        elif self.ltimekeep == 1:
            self.ltransition = False
            self.ltimekeep = 0
        if self.left < 0 and self.prevleft >= 0:
            self.lreverse = True
            self.ltransition = True
            self.ltimekeep = 2
        elif self.left >= 0 and self.prevleft < 0:
            self.lreverse = False
            self.ltransition = True
            self.ltimekeep = 2
        
        if self.rtimekeep > 1:
            self.rtransition = True
            self.rtimekeep -= 1
        elif self.rtimekeep == 1:
            self.rtransition = False
            self.rtimekeep = 0
        if self.right < 0 and self.prevright >= 0:
            self.rreverse = True
            self.rtransition = True
            self.rtimekeep = 2
        elif self.right >= 0 and self.prevright < 0:
            self.rreverse = False
            self.rtransition = True
            self.rtimekeep = 2
        '''
        if (self.lreverse == False and self.rreverse == False):
            print("forward")
        elif (self.lreverse == False and self.rreverse == True):
            print("RIGHT")
        elif (self.lreverse == True and self.rreverse == False):
            print("left")
        elif (self.lreverse == True and self.rreverse == True):
            print("BACKWARDS")
        else:
            print("wierde")
        '''
        
        self.prevleft = self.left
        self.prevright = self.right

        if (self.left < 0 and self.right > 0):
            self.left = -4*self.left
            self.right = 3*self.right
        if (self.left > 0 and self.right < 0):
            self.right = -4*self.right
            self.left = 3*self.left
        if (self.left < 0 and self.right < 0):
		self.left =  -self.left
                self.right = -self.right
        
        if (self.ltransition == True):
            self.left = 0
        if (self.rtransition == True):
            self.right = 0
        
        # rospy.loginfo("publishing: (%d, %d)", left, right) 
        if (self.ltransition == True):
            GPIO.output(L_BRAKE, GPIO.HIGH)
            self.left = 0
        
        if (self.rtransition == True):
            GPIO.output(R_BRAKE, GPIO.HIGH)
            self.right = 0
        
        if (self.ltransition == False):
            GPIO.output(L_BRAKE, GPIO.LOW)

        if (self.rtransition == False):
            GPIO.output(R_BRAKE, GPIO.LOW);
        
        if (self.ltransition == False and self.lreverse == False):
            GPIO.output(L_REVERSE, GPIO.LOW)
        
        if (self.rtransition == False and self.rreverse == False):
            GPIO.output(R_REVERSE, GPIO.LOW)

        if (self.lreverse == True):
            GPIO.output(L_REVERSE, GPIO.HIGH)
        
        if (self.rreverse == True):
            GPIO.output(R_REVERSE, GPIO.HIGH)
        msg = Motor()
        msg.a = int(self.left)
	msg.b = int(self.right)

        self.pub_motor.publish(msg)
        self.ticks_since_target += 1 

    #############################################################
    def rftwistCallback(self,msg):
    #############################################################
        # rospy.loginfo("-D- twistCallback: %s" % str(msg))
        self.ticks_since_target = 0
        self.dx = msg.linear.x
        self.dy = msg.linear.y
        self.dz = msg.linear.z
        self.dr = msg.angular.z

        if self.dr < 0.1 and self.dr >-0.1:
            self.dr = 0.0
#############################################################
#############################################################
if __name__ == '__main__':
    """ main """
    try:
        twistToMotors = TwistToMotors()
        twistToMotors.spin()
    except rospy.ROSInterruptException:
        pass
